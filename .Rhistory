## This function creates a special "matrix" object that can calculate and cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
# holds the initial value or NULL if nothing is initialized
set <- function(y) {
x <<- y
inv <<- NULL
}
# returns the stored matrix
get <- function() x
setInverse <- function(inverse) inv <<- solve
# get the cached inverse value
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## "cacheSolve" function computes the inverse of the special "matrix" created by makeCacheMatrix function.
## if the "matrix" doesn't change it should retrieve the inverse from the cache instead of calculate it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat)
x$setInverse(inv)
# return the inverse
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
# holds the initial value or NULL if nothing is initialized
set <- function(y) {
x <<- y
inv <<- NULL
}
# returns the stored matrix
get <- function() x
setInverse <- function(inverse_cache) inv <<- inverse_cache
# get the cached inverse value when the cacheSolve run for the first time
getInverse <- function() inv
# Store the cached inverse
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## "cacheSolve" function computes the inverse of the special "matrix" created by makeCacheMatrix function.
## if the "matrix" doesn't change it should retrieve the inverse from the cache instead of calculate it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat)
x$setInverse(inv)
# return the inverse
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
